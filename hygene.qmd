
# 데이터 위생

**데이터 위생(data hygiene)**은 특히 데이터 분석, 데이터베이스 관리 및 데이터 처리에서 중요한 개념으로, 오류가 적고 정확한 데이터를 보장하기 위한 일련의 방법론을 의미한다. 지금까지 조인이 어떻게 동작하는지 살펴봤으니, 왜 관계형 모델이 그렇게 유용한지 그리고 어떻게 가장 잘 사용할 수 있는지 살펴보자. 이를 위해, 데이터베이스 설계자들이 데이터를 어떻게 구조화하는지 살펴보자.

첫번째 규칙은 모든 값은 독립 요소로 분해될 수 없는 **원자(atomic)**적 속성을 지녀야 한다.
하나의 칼럼에 전체 이름을 넣는 대신에 별도로 구별되는 칼럼에 이름과 성을 저장해서 이름 컴포넌트를 뽑아내는 부분 문자열 연산(substring operation)을 사용할 필요가 없다.
좀더 중요하게는, 이름을 두 부분으로 저장한다.
왜냐하면, 공백으로 쪼개는 것은 신뢰성이 약하다.
"Eloise St. Cyr" 혹은 "Jan Mikkel Steubart" 같은 이름을 생각하면 쉽게 알 수 있다.

두번째 규칙은 모든 레코드는 유일한 기본키를 가져야한다.
내재적인 의미가 전혀없는 일련번호가 될 수도 있고, 레코드 값중의 하나 (`Person` 테이블의 `ident` 필드), 혹은 `Survey` 테이블에서 심지어 모든 측정값을 유일하게 식별하는 `(taken, person, quant)` 삼중값의 조합도 될 수 있다.

세번째 규칙은 불필요한 정보가 없어야 한다.
예를 들어, `Site`테이블을 제거하고 다음과 같이 `Visited` 테이블을 다시 작성할 수 있다.

| id       | lat       | long       | dated       | 
| -------- | --------- | ---------- | ----------- |
| 619      | \-49.85    | \-128.57    | 1927-02-08  | 
| 622      | \-49.85    | \-128.57    | 1927-02-10  | 
| 734      | \-47.15    | \-126.72    | 1930-01-07  | 
| 735      | \-47.15    | \-126.72    | 1930-01-12  | 
| 751      | \-47.15    | \-126.72    | 1930-02-26  | 
| 752      | \-47.15    | \-126.72    | \-null-      | 
| 837      | \-48.87    | \-123.40    | 1932-01-14  | 
| 844      | \-49.85    | \-128.57    | 1932-03-22  | 



사실, 스프레드쉬트와 마찬가지로 각 행에 각 측정값에 관한 모든 정보를 기록하는 하나의 테이블을 사용할 수도 있다.
문제는 이와 같은 방식으로 조직된 데이터를 일관성있게 관리하는 것은 매우 어렵다.
만약 특정한 사이트의 특정한 방문 날짜가 잘못된다면, 데이터베이스에 다수의 레코드를 변경해야한다.
더 안좋은 것은 다른 사이트도 그 날짜에 방문되었기 때문에 어느 레코드를 변경할지 추정해야하는 것이다.

네번째 규칙은 모든 값의 단위는 명시적으로 저장되어야 한다.
예제 데이터베이스는 그렇지 못해서 문제다.
로에리히(Roerich)의 염도 측정치는 다른 사람들보다 몇 배나 더 높지만, 천분율(parts per thousand) 대신 백만분율(parts per million)을 사용했는지, 아니면 1932년 그 사이트에서 실제로 염분 이상 현상이 있었는지 알 수 없습니다.


한걸음 물러나서 생각하자, 데이터와 저장하는데 사용되는 도구는 공생관계다.
테이블과 조인은 데이터가 특정 방식으로 잘 조직되었다면 매우 효과적이다.
하지만, 만약 특정 형태로 되어 있다면 효과적으로 다룰 수 있는 도구가 있기 때문에 데이터를 그와 같은 방식으로 조직하기도 한다.
인류학자가 말했듯이, 도구는 도구를 만드는 손을 만든다.
(the tool shapes the hand that shapes the tool) 즉, 도구(기술, 방법론 등)가 사용자(인간, 조직 등)에게 영향을 미치며, 동시에 사용자가 그 도구를 개선하거나 변형시키는 과정을 의미한다.
결과적으로, 도구와 사용자는 서로 영향을 주고받으며 발전해 나간다는 개념을 내포하고 있다.

## 세 종류 키 {#db-three-keys}

지금까지 데이터를 다중 연결된 테이블에 넣고 **키(keys)**를 사용하여 행을
연결하는 방식으로 데이터 모델을 생성했는데, 키와 관련된 몇몇 용어를
살펴볼 필요가 있다. 일반적으로 데이터베이스 모델에서 세가지 종류의 키가
사용된다.

-   **논리 키(logical key)**는 "실제 세상"이 행을 찾기 위해서 사용하는
    키다. 데이터 모델 예제에서, `name` 필드는 논리키다. 사용자에 대해서
    `screen_name`이고, `name` 필드를 사용하여 프로그램에서 여러번 사용자
    행을 찾을 수 있다. 논리 키에 `UNIQUE` 제약 사항을 추가하는 것이
    의미있다는 것을 종종 이해하게 된다. 논리 키는 어떻게 바깥 세상에서
    행을 찾는지 다루기 때문에, 테이블에 동일한 값을 가진 다중 행이
    존재한다는 것은 의미가 없다.

-   **주키(primary key)**는 통상적으로 데이터베이스에서 자동 대입되는
    숫자다. 프로그램 밖에서는 일반적으로 의미가 없고, 단지 서로 다른
    테이블에서 행을 열결할 때만 사용된다. 테이블에 행을 찾을 때,
    통상적으로 주키를 사용해서 행을 찾는 것이 가장 빠르게 행을 찾는
    방법이다. 주키는 정수형이어서, 매우 적은 저장공간을 차지하고 매우
    빨리 비교 혹은 정렬할 수 있다. 이번에 사용된 데이터 모델에서 `id`
    필드가 주키의 한 예가 된다.

-   **외부 키(foreign key)**는 일반적으로 다른 테이블에 연관된 행의
    주키를 가리키는 숫자다. 이번에 사용된 데이터 모델의 외부 키의 사례는
    `from_id`다.

주키 `id`필드명을 호출하고, 항상 외부키에 임의 필드명에 접미사로 `_id`
붙이는 명명규칙을 사용한다.    

## 연습문제

### 원자 값 식별하기

다음 중 어떤 것이 원자 값인가? 어떤 것이 아닌가? 그 이유는 무엇인가?

- 뉴질랜드 (New Zealand)
- 87 튜링 애비뉴 (87 Turing Avenue)
- 1971년 1월 25일 (January 25, 1971)
- XY 좌표 (0.5, 3.3)

---

뉴질랜드는 명확한 원자 값이다.

주소와 XY 좌표는 별도로 저장되야 하는 여러 정보를 포함하고 있다.

- 주소, 거리명
- X 좌표, Y 좌표

날짜 항목은 월, 일, 연도 요소를 포함하고 있어 덜 명확하다. 
그러나 SQL에는 `DATE` 데이터 유형이 있으며, 날짜는 이 형식을 사용하여 저장되어야 한다. 
월, 일 또는 연도를 별도로 작업해야 하는 경우, 
데이터베이스 소프트웨어에서 사용 가능한 SQL 함수를 사용할 수 있다(예: SQLite [`EXTRACT`](https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions050.htm) 또는 [`STRFTIME`](https://www.sqlite.org/lang_datefunc.html)).


### 기본 키 식별하기

다음 테이블에 기본 키는 무엇인가?
즉, 어떤 값 혹은 값들을 조합해야 레코드를 유일무이하게 식별해낼 수 있을까?

| latitude | longitude | date       | temperature | 
| -------- | --------- | ---------- | ----------- |
| 57\.3     | \-22.5     | 2015-01-09 | \-14.2       | 

---

위도, 경도 및 날짜는 모두 온도 기록을 고유하게 식별하는 데 필요하다.






